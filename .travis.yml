# This Travis job script has been generated by a script via
#
#   haskell-ci 'cabal.project'
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.7.20191106
#
language: c
dist: xenial
git:
  # whether to recursively clone submodules
  submodules: false
cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.hlint
before_cache:
  - rm -fv $CABALHOME/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $CABALHOME/packages/hackage.haskell.org/00-index.*
  - rm -fv $CABALHOME/packages/hackage.haskell.org/*.json
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.cache
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $CABALHOME/packages/head.hackage
matrix:
  include:
    - compiler: ghc-8.8.1
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.8.1","cabal-install-3.0"]}}
    - compiler: ghc-8.6.5
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.6.5","cabal-install-3.0"]}}
    - compiler: ghc-8.4.4
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.4.4","cabal-install-3.0"]}}
    - compiler: ghc-8.2.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.2.2","cabal-install-3.0"]}}
    - compiler: ghc-8.0.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.0.2","cabal-install-3.0"]}}
before_install:
  - HC=$(echo "/opt/$CC/bin/ghc" | sed 's/-/\//')
  - WITHCOMPILER="-w $HC"
  - HADDOCK=$(echo "/opt/$CC/bin/haddock" | sed 's/-/\//')
  - HCPKG="$HC-pkg"
  - unset CC
  - CABAL=/opt/ghc/bin/cabal
  - CABALHOME=$HOME/.cabal
  - export PATH="$CABALHOME/bin:$PATH"
  - TOP=$(pwd)
  - "HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')"
  - echo $HCNUMVER
  - CABAL="$CABAL -vnormal+nowrap+markoutput"
  - set -o pipefail
  - |
    echo 'function blue(s) { printf "\033[0;34m" s "\033[0m " }'           >> .colorful.awk
    echo 'BEGIN { state = "output"; }'                                     >> .colorful.awk
    echo '/^-----BEGIN CABAL OUTPUT-----$/ { state = "cabal" }'            >> .colorful.awk
    echo '/^-----END CABAL OUTPUT-----$/ { state = "output" }'             >> .colorful.awk
    echo '!/^(-----BEGIN CABAL OUTPUT-----|-----END CABAL OUTPUT-----)/ {' >> .colorful.awk
    echo '  if (state == "cabal") {'                                       >> .colorful.awk
    echo '    print blue($0)'                                              >> .colorful.awk
    echo '  } else {'                                                      >> .colorful.awk
    echo '    print $0'                                                    >> .colorful.awk
    echo '  }'                                                             >> .colorful.awk
    echo '}'                                                               >> .colorful.awk
  - cat .colorful.awk
  - |
    color_cabal_output () {
      awk -f $TOP/.colorful.awk
    }
  - echo text | color_cabal_output
install:
  - ${CABAL} --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - TEST=--enable-tests
  - BENCH=--enable-benchmarks
  - HEADHACKAGE=false
  - rm -f $CABALHOME/config
  - |
    echo "verbose: normal +nowrap +markoutput"                                  >> $CABALHOME/config
    echo "remote-build-reporting: anonymous"                                    >> $CABALHOME/config
    echo "write-ghc-environment-files: always"                                  >> $CABALHOME/config
    echo "remote-repo-cache: $CABALHOME/packages"                               >> $CABALHOME/config
    echo "logs-dir:          $CABALHOME/logs"                                   >> $CABALHOME/config
    echo "world-file:        $CABALHOME/world"                                  >> $CABALHOME/config
    echo "extra-prog-path:   $CABALHOME/bin"                                    >> $CABALHOME/config
    echo "symlink-bindir:    $CABALHOME/bin"                                    >> $CABALHOME/config
    echo "installdir:        $CABALHOME/bin"                                    >> $CABALHOME/config
    echo "build-summary:     $CABALHOME/logs/build.log"                         >> $CABALHOME/config
    echo "store-dir:         $CABALHOME/store"                                  >> $CABALHOME/config
    echo "install-dirs user"                                                    >> $CABALHOME/config
    echo "  prefix: $CABALHOME"                                                 >> $CABALHOME/config
    echo "repository hackage.haskell.org"                                       >> $CABALHOME/config
    echo "  url: http://hackage.haskell.org/"                                   >> $CABALHOME/config
    echo "  secure: True"                                                       >> $CABALHOME/config
    echo "  key-threshold: 3"                                                   >> $CABALHOME/config
    echo "  root-keys:"                                                         >> $CABALHOME/config
    echo "    fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0" >> $CABALHOME/config
    echo "    1ea9ba32c526d1cc91ab5e5bd364ec5e9e8cb67179a471872f6e26f0ae773d42" >> $CABALHOME/config
    echo "    2c6c3627bd6c982990239487f1abd02e08a02e6cf16edb105a8012d444d870c3" >> $CABALHOME/config
    echo "    0a5c7ea47cd1b15f01f5f51a33adda7e655bc0f0b0615baa8e271f4c3351e21d" >> $CABALHOME/config
    echo "    51f0161b906011b52c6613376b1ae937670da69322113a246a09f807c62f6921" >> $CABALHOME/config
  - |
    echo "program-default-options"                >> $CABALHOME/config
    echo "  ghc-options: $GHCJOBS +RTS -M6G -RTS" >> $CABALHOME/config
  - cat $CABALHOME/config
  - rm -fv cabal.project cabal.project.local cabal.project.freeze
  - travis_retry ${CABAL} v2-update -v
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: zebra-cli" >> cabal.project
    echo "packages: zebra-core" >> cabal.project
    echo "packages: zebra-core/test" >> cabal.project
    echo "packages: lib/anemone" >> cabal.project
    echo "packages: lib/disorder/disorder-core" >> cabal.project
    echo "packages: lib/disorder/disorder-corpus" >> cabal.project
    echo "packages: lib/disorder/disorder-jack" >> cabal.project
    echo "packages: lib/viking" >> cabal.project
    echo "packages: lib/snapper" >> cabal.project
    echo "packages: lib/x/x-show" >> cabal.project
    echo "packages: lib/x/x-bytestring" >> cabal.project
    echo "packages: lib/x/x-optparse" >> cabal.project
    echo "packages: lib/x/x-vector" >> cabal.project
    echo "packages: lib/p" >> cabal.project
  - |
    echo "constraints: cabal > 2" >> cabal.project
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(ambiata-anemone|ambiata-disorder-core|ambiata-disorder-corpus|ambiata-disorder-jack|ambiata-p|ambiata-snapper|ambiata-viking|ambiata-x-bytestring|ambiata-x-optparse|ambiata-x-show|ambiata-x-vector|ambiata-zebra-cli|ambiata-zebra-core|ambiata-zebra-core-test)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  - if [ -f "zebra-cli/configure.ac" ]; then (cd "zebra-cli" && autoreconf -i); fi
  - if [ -f "zebra-core/configure.ac" ]; then (cd "zebra-core" && autoreconf -i); fi
  - if [ -f "zebra-core/test/configure.ac" ]; then (cd "zebra-core/test" && autoreconf -i); fi
  - if [ -f "lib/anemone/configure.ac" ]; then (cd "lib/anemone" && autoreconf -i); fi
  - if [ -f "lib/disorder/disorder-core/configure.ac" ]; then (cd "lib/disorder/disorder-core" && autoreconf -i); fi
  - if [ -f "lib/disorder/disorder-corpus/configure.ac" ]; then (cd "lib/disorder/disorder-corpus" && autoreconf -i); fi
  - if [ -f "lib/disorder/disorder-jack/configure.ac" ]; then (cd "lib/disorder/disorder-jack" && autoreconf -i); fi
  - if [ -f "lib/viking/configure.ac" ]; then (cd "lib/viking" && autoreconf -i); fi
  - if [ -f "lib/snapper/configure.ac" ]; then (cd "lib/snapper" && autoreconf -i); fi
  - if [ -f "lib/x/x-show/configure.ac" ]; then (cd "lib/x/x-show" && autoreconf -i); fi
  - if [ -f "lib/x/x-bytestring/configure.ac" ]; then (cd "lib/x/x-bytestring" && autoreconf -i); fi
  - if [ -f "lib/x/x-optparse/configure.ac" ]; then (cd "lib/x/x-optparse" && autoreconf -i); fi
  - if [ -f "lib/x/x-vector/configure.ac" ]; then (cd "lib/x/x-vector" && autoreconf -i); fi
  - if [ -f "lib/p/configure.ac" ]; then (cd "lib/p" && autoreconf -i); fi
  - ${CABAL} v2-freeze $WITHCOMPILER ${TEST} ${BENCH} | color_cabal_output
  - "cat cabal.project.freeze | sed -E 's/^(constraints: *| *)//' | sed 's/any.//'"
  - rm  cabal.project.freeze
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} --dep -j2 all | color_cabal_output
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --dep -j2 all | color_cabal_output
script:
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)
  # Packaging...
  - ${CABAL} v2-sdist all | color_cabal_output
  # Unpacking...
  - mv dist-newstyle/sdist/*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec tar -xvf '{}' \;
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec rm       '{}' \;
  - PKGDIR_ambiata_zebra_cli="$(find . -maxdepth 1 -type d -regex '.*/ambiata-zebra-cli-[0-9.]*')"
  - PKGDIR_ambiata_zebra_core="$(find . -maxdepth 1 -type d -regex '.*/ambiata-zebra-core-[0-9.]*')"
  - PKGDIR_ambiata_zebra_core_test="$(find . -maxdepth 1 -type d -regex '.*/ambiata-zebra-core-test-[0-9.]*')"
  - PKGDIR_ambiata_anemone="$(find . -maxdepth 1 -type d -regex '.*/ambiata-anemone-[0-9.]*')"
  - PKGDIR_ambiata_disorder_core="$(find . -maxdepth 1 -type d -regex '.*/ambiata-disorder-core-[0-9.]*')"
  - PKGDIR_ambiata_disorder_corpus="$(find . -maxdepth 1 -type d -regex '.*/ambiata-disorder-corpus-[0-9.]*')"
  - PKGDIR_ambiata_disorder_jack="$(find . -maxdepth 1 -type d -regex '.*/ambiata-disorder-jack-[0-9.]*')"
  - PKGDIR_ambiata_viking="$(find . -maxdepth 1 -type d -regex '.*/ambiata-viking-[0-9.]*')"
  - PKGDIR_ambiata_snapper="$(find . -maxdepth 1 -type d -regex '.*/ambiata-snapper-[0-9.]*')"
  - PKGDIR_ambiata_x_show="$(find . -maxdepth 1 -type d -regex '.*/ambiata-x-show-[0-9.]*')"
  - PKGDIR_ambiata_x_bytestring="$(find . -maxdepth 1 -type d -regex '.*/ambiata-x-bytestring-[0-9.]*')"
  - PKGDIR_ambiata_x_optparse="$(find . -maxdepth 1 -type d -regex '.*/ambiata-x-optparse-[0-9.]*')"
  - PKGDIR_ambiata_x_vector="$(find . -maxdepth 1 -type d -regex '.*/ambiata-x-vector-[0-9.]*')"
  - PKGDIR_ambiata_p="$(find . -maxdepth 1 -type d -regex '.*/ambiata-p-[0-9.]*')"
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: ${PKGDIR_ambiata_zebra_cli}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_zebra_core}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_zebra_core_test}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_anemone}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_disorder_core}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_disorder_corpus}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_disorder_jack}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_viking}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_snapper}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_x_show}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_x_bytestring}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_x_optparse}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_x_vector}" >> cabal.project
    echo "packages: ${PKGDIR_ambiata_p}" >> cabal.project
  - |
    echo "constraints: cabal > 2" >> cabal.project
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(ambiata-anemone|ambiata-disorder-core|ambiata-disorder-corpus|ambiata-disorder-jack|ambiata-p|ambiata-snapper|ambiata-viking|ambiata-x-bytestring|ambiata-x-optparse|ambiata-x-show|ambiata-x-vector|ambiata-zebra-cli|ambiata-zebra-core|ambiata-zebra-core-test)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  # Building...
  # this builds all libraries and executables (without tests/benchmarks)
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all | color_cabal_output
  # Building with tests and benchmarks...
  # build & run tests, build benchmarks
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output
  # Testing...
  - ${CABAL} v2-test $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output
  # cabal check...
  - (cd ${PKGDIR_ambiata_zebra_cli} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_zebra_core} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_zebra_core_test} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_anemone} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_disorder_core} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_disorder_corpus} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_disorder_jack} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_viking} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_snapper} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_x_show} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_x_bytestring} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_x_optparse} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_x_vector} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_ambiata_p} && ${CABAL} -vnormal check)
  # haddock...
  - ${CABAL} v2-haddock $WITHCOMPILER --with-haddock $HADDOCK ${TEST} ${BENCH} all | color_cabal_output
  # Building without installed constraints for packages in global-db...
  - rm -f cabal.project.local
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all | color_cabal_output

# REGENDATA ("0.7.20191106",["cabal.project"])
# EOF
